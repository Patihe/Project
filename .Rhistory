84 > 42
84 > 42
find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
x <- 10
y <- 10
"hello" -> x
x
x <- "hello"
x
class (x)
x <- 5P
x <- 5L
x
y <- 5
y
x ,- vector()
x <- vector()
x
x1 <- c("a", "b", "c")
x2 <- c("a", 1, 2)
x3 <- 1:10
length(x1)
x1 <- c("a", "b", "c")
x2 <- c("a", 1, 2)
x3 <- c(TRUE, FALSE)
x4 <- 1:10
length(x1)
x1 [1]
x4 [8]
x1 [1:2]
x <- llist(3, "c")
x <- list(3, "c")
y <- list(1, "a", TRUE, 1 + 4i)
z <- list(var1 = 1:4, var2 = 0.6)
x
y
class(y)
x [[1]]
x[[2]]
z$var1
y
z <- list(var1 = 1:4, var2 = 0.6)
z$var1
class(y[1])
class(y[[1]])
x <- matrix(1:6, nrow=2, ncol=3)
x
x [1,2]
x
x[2,]
x[,2]
x,- c(1,2,3,4,NA,0/0)
x<- c(1,2,3,4,NA,0/0)
x
is.na(x)
is.nan(x)
!is.nan(x)
nrow(df[is.na(df$nitrate),])
nrow(df[is.na(df$nitrate),])
cls
today <- "10/6/2015"
class(today)
today.date <- as.Date(today,"%d/%m/%Y")
today.date
class(today.date)
unclass(today.date)
f <- function(a, b)
3
x <- matrix (1:8, 2, 4)
apply (x, 2, mean)
apply (x, 1, mean)
apply (y, 1, mean)
y <- matrix(1:7, 3, 4)
y <- matrix(1:6, 2, 4)
y <- matrix(1:6, 2, 12)
apply
apply(y, 2, mean)
append(y, 1, mean())
x <- matrix(1:8, 2, 4)
apply (x, 2, mean)
append(x, 1, mean())
append(x, 1, mean)
apply (x, 1, mean)
apply (x, 2, mean)
apply(x,1,function (x) x/2)
apply(x,2,function (x) x/2)
x <-list (a=1:5, b=6:10)
lapply(x, mean)
lapply(x, sum)
lapply(x, min)
x <- list(a=matrix(1:4,2,2)),matrix(1:6,3,2)
x <- list(a=matrix(1:4,2,2)),matrix(1:6,3,2))
x <- list(a=matrix(1:4,2,2)),b=matrix(1:6,3,2))
x <- list(a=matrix (1:4,2,2)), b=matrix (1:6,3,2))
x <- list (a=matrix (1:4,2,2), b=matrix (1:6,3,2))
lapply(x, function (x) x[,1]/2)
x <-list (a=1:5, b=6:10)
lapply(x, mean)
sapply(x, mean)
names<-c ("ting", "ting", "chong", "chong", "chong")
subject<-c ("IT", "CS", "AI", "CS", "AI")
marks<-c (90, 95, 80, 90, 99, 85)
dt<-data.frame(name, subject, marks)
dt<-data.frame('name', subject, marks)
dt<-data.frame(name,subject,marks)
dt<-data.frame (name,subject,marks)
split(dt, dt$name)
split(dt, dt$name)
x <- rnorm(1000)
summary(x)
x <- dnorm(1000)
summary(x)
x <- pnorm(1000)
summary(x)
x <- rpois(1000)
x <- Rpois(1000)
x <- rpois(1000)
set.seed(10)
10
sample (10)
sample (10)
sample (10)
sample (10)
sample (10)
set.seed(1)
sample (10)
sample (10)
sample (10)
set.seed(1)
sample (10)
set.seed(2)
x <- rep (0:2, each = 3)
e <- rnorm(9, 0, 20) # Generate 9 random numbers
y <- 0.5 + 2 * x + e
sample (2)
library (datasets)
Rprof()
fit <- lm(y ~ x + e)
Rprof(NULL)
summaryRprof()
}
setwd("~/")
## Example of Lexical Scoping
x <- "vegas"
x
numeric_vector <- c(1, 10, 49)
character_vector <- c("a","b","c")
boolean_vector <- c(TRUE, FALSE, TRUE)
49
b
c()
x <- c(4, "a", TRUE)
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
cbind(x, y)
x <- c(3, 5, 1, 10, 12, 6)
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x > 10] == 4
x[x > 4] <- 10
x
x <- list(2, "a", "b", TRUE)
x[[1]]
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- 3
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555)
c(z, 555, z)
z * 2 + 100
z - 1
sqrt(z - 1)
info ()
sqrt ("my_sqrt")
()
sqrt (z -1)
nxt()
z <- 1("my_sqrt")
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- sqrt(z / my_sqrt)
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
x <- as.Date("1973-04-06")
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
z
f
x
g
d
l
library(datasets)
data(iris)
?iris
iris
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
apply(mtcars, 2, mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Pat")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
libary(swirl)
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
my_sqrt
skip()
skip()
skip()
skip()
skip()
skip()
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20)
library(datasets)
ls
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20))
library("MASS") data("cats") plot(cats$Bwt, cats$Hwt, type="l", col="red", lwd=1, ylab="Heart weight (Kg)", xlab="Body weight (Kg)", main="Anatomical features of house cats") fit1<-lm(formula= cats$Hwt ~ cats$Bwt) abline(fit1, lty="dashed") #sample of text to be placed in plot text(x=2.3, y=18, labels="R2=0.896\n P=2615e-15")
library(datasets) hist(warpbreaks$breaks, breaks=20, xlab = "Breaks", main="Number Breaks in Yarn during Weaving", ylim = c(0,20))
library("MASS")
data("cats")
plot(cats$Bwt, cats$Hwt,
type="l",
col="red",
lwd=1,
ylab="Heart weight (Kg)",
xlab="Body weight (Kg)",
main="Anatomical features of house cats")
fit1<-lm(formula= cats$Hwt~ cats$Bwt)
abline(fit1, lty="dashed")
#sample of text to be placed in plot
text(x=2.3, y=18, labels="R2=0.896\n P=2615e-15")
library(lattice)
library(datasets)
#boxplotSepal.Lengthby Species
bwplot(Sepal.Length~ factor(Species) , data=iris,
xlab="Species",
col="red",
pch=16,
main=("Sepal.Lengthby Species"))
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
"!is.na(c(3, 5, NA, 10))"
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
reset()
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
script_results_identical('result1'); multi_expr_creates_var('result1')
View(result3)
skip()
View(result3)
script_results_identical('result3'); multi_expr_creates_var('result3')
skip()
submit()
View(result3)
cran %>%
select() %>%
print
skip()
script_vals_identical()
skip()
skip()
arrange()
skip()
histogram(~disp| factor(cyl), data=mtcars,
main="Displacement by Cylinders",
xlab="Displacment(cu in)",
col="blue")
load("D:/Data Scientist/Exploratory Data Analysis/.RData")
library(datasets)
plot(iris$Sepal.Length, iris$Petal.Length,
col=iris$Species,
pch=16,
cex=0.5,
xlab="Sepal Length",
ylab="Petal Length",
main="Flower Characteristics in Iris")
legend(x=4.2, y=7, legend=levels(iris$Species),col=c(1:3), pch=16)
```
getwd()
setwd("D:\Data Scientist\Statiscal Inference\Project")
setwd("D:\\Data Scientist\\Statiscal Inference\\Project")
set.seed(13)
lambda <- 0.2
num_sim <- 1000
sample_size <- 40
sim <- matrix(rexp(num_sim*sample_size, rate=lambda), num_sim, sample_size)
row_means <- rowMeans(sim)
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of averages samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
lines(density(row_means))
abline(v=1/lambda, col="red")
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("blue", "red"))
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("black", "red"))
qqnorm(row_means); qqline(row_means)
lambda_vals <- seq(4, 6, by=0.01)
coverage <- sapply(lambda_vals, function(lamb) {
mu_hats <- rowMeans(matrix(rexp(sample_size*num_sim, rate=0.2),
num_sim, sample_size))
ll <- mu_hats - qnorm(0.975) * sqrt(1/lambda**2/sample_size)
ul <- mu_hats + qnorm(0.975) * sqrt(1/lambda**2/sample_size)
mean(ll < lamb & ul > lamb)
})
library(ggplot2)
qplot(lambda_vals, coverage) + geom_hline(yintercept=0.95)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="Identity",) +
facet_grid(. ~ supp) +
xlab("Dose in Miligrams") +
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement Type"))
fit <- lm(len ~ dose + supp, data=ToothGrowth)
summary(fit)
confint(fit)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in Miligrams") +
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement Type"))
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="Identity",) +
facet_grid(. ~ supp) +
xlab("Dose in Miligrams") +
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement Type"))
